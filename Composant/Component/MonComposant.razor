@namespace Component
@attributes AllOtherAttributes

<div class="mon-composant-container" style="background-color:@BackgroundColor;" @attributes="AllOtherAttributes">
    <div class="component-content">
        <p>@Message</p>
        <button class="mon-composant-button" @onclick="ChangeBackgroundColor">
            <b>Changer la couleur de fond</b>
        </button>
    </div>
</div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AllOtherAttributes { get; set; } = new();
    object attributes;
    
    [Parameter]
    public string Message { get; set; } = "Ceci est un message par défaut.";

    [Parameter]
    public string? PageBackgroundColor { get; set; } = "AntiqueWhite";

    [Parameter]
    public EventCallback OnColorChange { get; set; }

    private string BackgroundColor { get; set; }

    private readonly List<string> Colors = new()
    {
        "AntiqueWhite", "LightBlue", "LightGreen", "LightCoral", "LightPink",
        "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSteelBlue", "LightYellow"
    };

    protected override void OnInitialized()
    {
        BackgroundColor = string.IsNullOrWhiteSpace(PageBackgroundColor) ? "white" : PageBackgroundColor;
    }

    private async Task ChangeBackgroundColor()
    {
        var random = new Random();
        string newColor;

        do
        {
            newColor = Colors[random.Next(Colors.Count)];
        } while (newColor == BackgroundColor);

        BackgroundColor = newColor;

        if (OnColorChange.HasDelegate)
        {
            await OnColorChange.InvokeAsync();
        }
    }

}